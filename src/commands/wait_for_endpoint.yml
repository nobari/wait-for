---
description: >
  Wait for an HTTP endpoint to become available before proceeding.

parameters:
  url:
    type: string
    description: "The URL to poll (e.g., http://localhost:8080/health)"
  service_name:
    type: string
    description: "A descriptive name for the service you're waiting for"
  timeout:
    type: integer
    default: 120
    description: Maximum time to wait in seconds before failing
  interval:
    type: integer
    default: 5
    description: Interval between checks in seconds
  verbose:
    type: boolean
    default: true
    description: Enable verbose output including debug information
  status_code:
    type: integer
    default: 200
    description: Expected HTTP status code to consider endpoint available
  headers:
    type: string
    default: ""
    description: >-
      Optional HTTP headers to include in requests
      (format: 'Header-Name: value')
  method:
    type: enum
    enum: [GET, POST, HEAD]
    default: GET
    description: HTTP method to use
  fail_on_error:
    type: boolean
    default: true
    description: >-
      Whether to fail the build if the endpoint doesn't become available
      within timeout
  body:
    type: string
    default: ""
    description: Request body content for POST requests
  ca_cert:
    type: string
    default: ""
    description: Path to custom CA certificate for HTTPS verification
  max_retries:
    type: integer
    default: 0
    description: >-
      Maximum number of connection attempts before timeout.
      When 0, uses timeout/interval to determine max attempts
  require_response_body:
    type: boolean
    default: false
    description: Whether to require a non-empty response body
  response_contains:
    type: string
    default: ""
    description: Text that must be present in response body
  insecure:
    type: boolean
    default: false
    description: Skip SSL certificate validation for HTTPS requests
  connect_timeout:
    type: integer
    default: 10
    description: Timeout for establishing connection in seconds
  follow_redirects:
    type: boolean
    default: true
    description: Whether to follow HTTP redirects
  basic_auth:
    type: string
    default: ""
    description: "username:password for basic authentication"
  proxy:
    type: string
    default: ""
    description: Proxy URL to use for requests

steps:
  - run:
      name: Wait for << parameters.service_name >> endpoint
      command: |
        start_time=$(date +%s)
        end_time=$((start_time + << parameters.timeout >>))
        attempt=0

        # Determine maximum retry attempts
        if [ << parameters.max_retries >> -gt 0 ]; then
          max_attempts=<< parameters.max_retries >>
        else
          # If max_retries is 0, calculate based on timeout and interval
          max_attempts=$(( << parameters.timeout >> / << parameters.interval >> ))
        fi

        # Prepare headers
        HEADER_ARGS=""
        if [ -n "<< parameters.headers >>" ]; then
          # Split on newlines and add as -H args
          IFS=$'\n'
          for header in << parameters.headers >>; do
            HEADER_ARGS="${HEADER_ARGS} -H \"${header}\""
          done
          unset IFS
        fi

        # Add basic auth if specified
        if [ -n "<< parameters.basic_auth >>" ]; then
          HEADER_ARGS="${HEADER_ARGS} -u \"<< parameters.basic_auth >>\""
        fi

        # Verbose output message
        if [ "<< parameters.verbose >>" = "true" ]; then
          echo "Waiting for << parameters.service_name >>"
          echo "URL: << parameters.url >>"
          echo "Timeout: << parameters.timeout >>s, Interval: << parameters.interval >>s"
          echo "Expected status: << parameters.status_code >>"
          if [ -n "<< parameters.headers >>" ]; then
            echo "Using headers: << parameters.headers >>"
          fi
          if [ -n "<< parameters.body >>" ]; then
            echo "Using body content for POST requests"
          fi
          if [ -n "<< parameters.response_contains >>" ]; then
            echo "Verifying response contains text: '<< parameters.response_contains >>'"
          fi
          if [ "<< parameters.require_response_body >>" = "true" ]; then
            echo "Requiring non-empty response body"
          fi
          if [ "<< parameters.insecure >>" = "true" ]; then
            echo "Skipping SSL certificate validation"
          fi
          if [ << parameters.max_retries >> -gt 0 ]; then
            echo "Maximum retry attempts: << parameters.max_retries >>"
          fi
        fi

        # Main wait loop
        while true; do
          current_time=$(date +%s)
          elapsed=$((current_time - start_time))
          attempt=$((attempt + 1))

          # Check timeout
          if [ $current_time -gt $end_time ]; then
            echo "Timeout after ${elapsed}s waiting for << parameters.service_name >>"
            if [ "<< parameters.fail_on_error >>" = "true" ]; then
              exit 1
            else
              echo "Continuing despite endpoint not being available (fail_on_error=false)"
              exit 0
            fi
          fi

          # Check max attempts if specified
          if [ << parameters.max_retries >> -gt 0 ] && [ $attempt -gt $max_attempts ]; then
            echo "Reached maximum number of attempts (${max_attempts}) for << parameters.service_name >>"
            if [ "<< parameters.fail_on_error >>" = "true" ]; then
              exit 1
            else
              echo "Continuing despite endpoint not being available (fail_on_error=false)"
              exit 0
            fi
          fi

          # Attempt to connect with appropriate options
          if [ "<< parameters.verbose >>" = "true" ]; then
            echo "Checking << parameters.service_name >> (${elapsed}s elapsed, attempt ${attempt}/${max_attempts})"
          fi

          # Build curl command
          CURL_CMD="curl -s"

          # Handle response body requirements
          has_body=false
          if [ "<< parameters.require_response_body >>" = "true" ] || [ -n "<< parameters.response_contains >>" ]; then
            has_body=true
            RESPONSE_FILE="response_body.txt"
            CURL_CMD="${CURL_CMD} -o ${RESPONSE_FILE}"
          else
            CURL_CMD="${CURL_CMD} -o /dev/null"
          fi

          CURL_CMD="${CURL_CMD} -w \"%{http_code}\" -X << parameters.method >>"

          # Add SSL options
          if [ "<< parameters.insecure >>" = "true" ]; then
            CURL_CMD="${CURL_CMD} -k"
          fi

          if [ -n "<< parameters.ca_cert >>" ]; then
            CURL_CMD="${CURL_CMD} --cacert \"<< parameters.ca_cert >>\""
          fi

          # Add connection timeout, redirect handling, and proxy if specified
          CURL_CMD="${CURL_CMD} --connect-timeout << parameters.connect_timeout >>"

          if [ "<< parameters.follow_redirects >>" = "true" ]; then
            CURL_CMD="${CURL_CMD} -L"
          fi

          if [ -n "<< parameters.proxy >>" ]; then
            CURL_CMD="${CURL_CMD} --proxy \"<< parameters.proxy >>\""
          fi

          # Add body for POST requests
          if [ -n "<< parameters.body >>" ] && [ "<< parameters.method >>" = "POST" ]; then
            CURL_CMD="${CURL_CMD} -d \"<< parameters.body >>\""
          fi

          CURL_CMD="${CURL_CMD} ${HEADER_ARGS} \"<< parameters.url >>\""

          # Debug information when verbose is true
          if [ "<< parameters.verbose >>" = "true" ]; then
            echo "⚙️  Debug: Full curl command: ${CURL_CMD}"
            echo ""

            # Capture detailed curl output and status code
            set +e  # Don't exit on error
            cmd_output=$(eval ${CURL_CMD} -v 2>&1)
            curl_exit_code=$?
            # Extract status code from output
            status_code=$(echo "$cmd_output" | grep -o '[0-9]\{3\}$' || echo "failed_$curl_exit_code")
            set -e  # Exit on error (restore default behavior)

            echo "⚙️  Debug: curl exit code: ${curl_exit_code}"
            echo "⚙️  Debug: curl output:"
            echo "$cmd_output"
            echo ""
            echo "⚙️  Debug: status code: ${status_code}"
            echo ""
          else
            # Execute curl command for the check when not in verbose mode
            status_code=$(eval ${CURL_CMD} || echo "failed_$?")
          fi

          # Check if status code matches expected
          status_code_ok=false
          if [ "$status_code" = "<< parameters.status_code >>" ]; then
            status_code_ok=true
          fi

          # Check response body if required
          body_check_ok=true
          if [ "$status_code_ok" = "true" ] && [ "<< parameters.require_response_body >>" = "true" ]; then
            if [ ! -s "${RESPONSE_FILE}" ]; then
              body_check_ok=false
              if [ "<< parameters.verbose >>" = "true" ]; then
                echo "❌ Response body is empty (required non-empty)"
              fi
            fi
          fi

          # Check response contains specific text if required
          contains_check_ok=true
          if [ "$status_code_ok" = "true" ] && [ -n "<< parameters.response_contains >>" ]; then
            search_text="<< parameters.response_contains >>"
            if ! grep -q "$search_text" "${RESPONSE_FILE}" 2>/dev/null; then
              contains_check_ok=false
              if [ "<< parameters.verbose >>" = "true" ]; then
                echo "❌ Response doesn't contain required text: '<< parameters.response_contains >>'"
              fi
            fi
          fi

          # Service is up if all checks pass
          if [ "$status_code_ok" = "true" ] && [ "$body_check_ok" = "true" ] && [ "$contains_check_ok" = "true" ]; then
            echo "✅ << parameters.service_name >> is up! HTTP << parameters.status_code >> received"
            if [ "$has_body" = "true" ]; then
              echo "✅ Response body checks passed"
            fi
            exit 0
          elif [ "<< parameters.verbose >>" = "true" ]; then
            if [ -n "$status_code" ]; then
              if [[ "$status_code" == failed_* ]]; then
                exit_code=${status_code#failed_}
                echo "❌ Curl command failed with exit code: ${exit_code}"
              else
                echo "⏳ Received status code: $status_code (waiting for << parameters.status_code >>)"
              fi
            else
              echo "❌ Connection failed"
            fi
          fi

          # Clean up response file if created
          if [ -f "${RESPONSE_FILE}" ]; then
            rm "${RESPONSE_FILE}"
          fi

          sleep << parameters.interval >>
        done
